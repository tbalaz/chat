using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace poc.Pages
{
    public class LoginModel : PageModel
    {
        [BindProperty]
        [Required(ErrorMessage = "Please enter your username.")]
        public string Username { get; set; }

        [BindProperty]
        [Required(ErrorMessage = "Please enter your password.")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        public IActionResult OnGet()
        {
            return Page();
        }

        public IActionResult OnPost()
        {
            if (ModelState.IsValid)
            {
                // TODO: Authenticate the user against Active Directory.

                // Redirect the user to the Welcome page if authentication is successful.
                return RedirectToPage("/Welcome", new { Username = Username });
            }

            return Page();
        }
    }
}


@page "{Username}"
@model poc.Pages.WelcomeModel

<h1>Welcome</h1>

<p>Current Date and Time: @DateTime.Now</p>

<p>Username: @Model.Username</p>

<p>User Given Name: @Model.GivenName</p>



using System;
using System.DirectoryServices.AccountManagement;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace poc.Pages
{
    public class WelcomeModel : PageModel
    {
        [BindProperty(SupportsGet = true)]
        public string Username { get; set; }

        public string GivenName { get; set; }

        public IActionResult OnGet()
        {
            try
            {
                using (var context = new PrincipalContext(ContextType.Domain, "sfac.preprod"))
                {
                    var userPrincipal = UserPrincipal.FindByIdentity(context, IdentityType.SamAccountName, Username);

                    if (userPrincipal != null)
                    {
                        GivenName = userPrincipal.GivenName;
                        return Page();
                    }
                }
            }
            catch (Exception ex)
            {
                // Log the error
            }

            return RedirectToPage("/Index");
        }
    }
}







using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.DirectoryServices.AccountManagement;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace poc.Pages
{
    public class LoginModel : PageModel
    {
        [BindProperty]
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        public class InputModel
        {
            [Required]
            [Display(Name = "Username")]
            public string Username { get; set; }

            [Required]
            [DataType(DataType.Password)]
            [Display(Name = "Password")]
            public string Password { get; set; }
        }

        public void OnGet(string returnUrl = null)
        {
            ReturnUrl = returnUrl;
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl ??= Url.Content("~/");

            if (ModelState.IsValid)
            {
                using (var context = new PrincipalContext(ContextType.Domain, "sfac.preprod"))
                {
                    if (context.ValidateCredentials(Input.Username, Input.Password))
                    {
                        var userPrincipal = UserPrincipal.FindByIdentity(context, IdentityType.SamAccountName, Input.Username);

                        var claims = new List<System.Security.Claims.Claim>
                        {
                            new System.Security.Claims.Claim(System.Security.Claims.ClaimTypes.Name, Input.Username),
                            new System.Security.Claims.Claim(System.Security.Claims.ClaimTypes.GivenName, userPrincipal.GivenName)
                        };

                        var claimsIdentity = new System.Security.Claims.ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                        var authProperties = new AuthenticationProperties
                        {
                            RedirectUri = returnUrl
                        };

                        await HttpContext.SignInAsync(
                            CookieAuthenticationDefaults.AuthenticationScheme,
                            new System.Security.Claims.ClaimsPrincipal(claimsIdentity),
                            authProperties);

                        return LocalRedirect(returnUrl);
                    }
                    else
                    {
                        ModelState.AddModelError(string.Empty, "Invalid username or password.");
                        return Page();
                    }
                }
            }

            return Page();
        }
    }
}
